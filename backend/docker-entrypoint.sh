#!/bin/sh
set -e

: "${MONGO_INITDB_ROOT_USERNAME:?MONGO_INITDB_ROOT_USERNAME not set}"
: "${MONGO_INITDB_ROOT_PASSWORD:?MONGO_INITDB_ROOT_PASSWORD not set}"
: "${MONGODB_REPLICA_SET:?MONGODB_REPLICA_SET not set}"
: "${MONGODB_REPLICA_SET_HOST:?MONGODB_REPLICA_SET_HOST not set}"
: "${MONGODB_PORT:?MONGODB_PORT not set}"
: "${MONGODB_DATABASE_AUTH_NAME:?MONGODB_DATABASE_AUTH_NAME not set}"

KEYFILE=/etc/mongo.key

echo "MONGO_INITDB_ROOT_USERNAME: $MONGO_INITDB_ROOT_USERNAME"
echo "MONGO_INITDB_ROOT_PASSWORD: $MONGO_INITDB_ROOT_PASSWORD"
echo "MONGODB_REPLICA_SET: $MONGODB_REPLICA_SET"
echo "MONGODB_REPLICA_SET_HOST: $MONGODB_REPLICA_SET_HOST"
echo "MONGODB_PORT: $MONGODB_PORT"
echo "MONGODB_DATABASE_AUTH_NAME: $MONGODB_DATABASE_AUTH_NAME"

if [ ! -f "$KEYFILE" ]; then
  echo "üîê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º keyfile –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
  head -c 756 /dev/urandom | base64 > "$KEYFILE"
  chmod 600 "$KEYFILE"
  echo "‚úÖ Keyfile —Å–æ–∑–¥–∞–Ω: $KEYFILE"
fi

echo "üöÄ –ó–∞–ø—É—Å–∫ mongod init —Å --replSet, –±–µ–∑ auth..."
mongod --replSet "${MONGODB_REPLICA_SET}" --bind_ip_all --port "${MONGODB_PORT}" --dbpath /data/db --fork --logpath /tmp/mongod-init.log

echo "‚è≥ –ñ–¥–µ–º, –ø–æ–∫–∞ mongod init –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω..."
timeout=15
while ! mongosh --host "127.0.0.1" --port "${MONGODB_PORT}" --eval "db.adminCommand('ping')" >/dev/null 2>&1; do
  sleep 1
  timeout=$((timeout - 1))
  if [ "$timeout" -le 0 ]; then
    echo "‚ùå mongod init –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    pkill mongod
    exit 1
  fi
done
echo "‚úÖ mongod init –ø–æ–¥–Ω—è–ª—Å—è"

echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ replica set –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ host'–∞–º–∏..."
RS_INIT_CHECK=$(mongosh --host "127.0.0.1" --port "${MONGODB_PORT}" --quiet --eval "try { rs.status().ok } catch(e) { 0 }")

if [ "$RS_INIT_CHECK" != "1" ]; then
  echo "üß± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º replica set —Å host'–æ–º: ${MONGODB_REPLICA_SET_HOST}:${MONGODB_PORT}..."
  mongosh --host "127.0.0.1" --port "${MONGODB_PORT}" --eval "
		rs.initiate({
			_id: '${MONGODB_REPLICA_SET}',
			members: [
				{ _id: 0, host: '${MONGODB_REPLICA_SET_HOST}:${MONGODB_PORT}' }
			]
		});
  "
  echo "‚úÖ Replica set –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
else
  echo "‚ÑπÔ∏è Replica set —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
fi

echo "‚è≥ –ñ–¥–µ–º, –ø–æ–∫–∞ node —Å—Ç–∞–Ω–µ—Ç PRIMARY..."
timeout=30
while true; do
  PRIMARY=$(mongosh --host "127.0.0.1" --port "${MONGODB_PORT}" --quiet --eval "rs.isMaster().ismaster" || echo "false")
  echo "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ PRIMARY: $PRIMARY"
  if [ "$PRIMARY" = "true" ]; then
    echo "‚úÖ Node —Å—Ç–∞–ª PRIMARY"
    break
  fi
  sleep 1
  timeout=$((timeout - 1))
  if [ "$timeout" -le 0 ]; then
    echo "‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è PRIMARY"
    exit 1
  fi
done

EXISTS=$(mongosh --host "127.0.0.1" --port "${MONGODB_PORT}" --quiet --eval "db.getSiblingDB('${MONGODB_DATABASE_AUTH_NAME}').system.users.find({user:'${MONGO_INITDB_ROOT_USERNAME}'}).count()")
if [ "$EXISTS" -eq 0 ]; then
  echo "üë§ –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞..."
  mongosh --host "127.0.0.1" --port "${MONGODB_PORT}" "${MONGODB_DATABASE_AUTH_NAME}" --eval "db.createUser({user:'${MONGO_INITDB_ROOT_USERNAME}', pwd:'${MONGO_INITDB_ROOT_PASSWORD}', roles:[{role:'root', db:'${MONGODB_DATABASE_AUTH_NAME}'}]});"
  echo "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω"
else
  echo "‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

echo "üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mongod init..."
mongosh --host "127.0.0.1" --port "${MONGODB_PORT}" --eval "db.getSiblingDB('admin').shutdownServer()" || true
sleep 5

echo "üîê –ó–∞–ø—É—Å–∫ mongod —Å auth, replSet –∏ keyFile..."
exec mongod \
  --replSet "${MONGODB_REPLICA_SET}" \
  --auth \
  --keyFile "$KEYFILE" \
  --bind_ip_all \
  --port "${MONGODB_PORT}" \
  --dbpath /data/db
